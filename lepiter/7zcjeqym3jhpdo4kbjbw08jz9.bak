{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:51:01.326124+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:51:01.326124+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "pxU5r/fuDQCPtIdFB+fShg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A modular monolith has excellent separation of concerns. How do we build that moldable?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:51:04.483992+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:51:18.699338+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "vEZpr/fuDQCPvOhsB+fShg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "**Executable specifications**"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:51:19.898723+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:51:51.530104+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "1HxUsPfuDQCQUfk2B+fShg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Executable specifications are made using exploratory modeling. In exploratory modeling scenario's are written as test cases that are used to drive the development of an object-oriented domain model. There are two patterns that are used to write them: \r- Time Inversion\r- Active-Passive\rThese patterns are used to do mostly top-down modeling. "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:08:36.444924+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:51:01.328975+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ImPqEvfuDQC9CqmGB+fShg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : " A hexagonal architecture is used to enable the building of a test-driven [[Domain Model]].  The domain model gets connected to its dependencies using a [[Hexagonal Context]] that provides the required services. "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:52:02.400693+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:52:11.690946+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "sQLdsvfuDQCQXyPvB+fShg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "***Time inversion***"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:52:12.144993+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:52:42.563847+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Y7Nxs/fuDQCQx61fB+fShg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "\rThe scenarios are written from the wanted end result backwards to the start. Starting with a goal to achieve makes it much easier to decide what is the actual minimum needed to make the scenario work. \r\r[blog post](https://www.reflektis.com/blog/time-inversion-pattern/)"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:52:26.381337+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:53:01.648474+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "d+5KtPfuDQCQ0Dw5B+fShg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "*** Active-Passive***"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:53:02.360297+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-04-12T16:53:15.029835+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "O+1vtvfuDQCRkmy0B+fShg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Active objects in the real world become passive objects in the domain language, and the other way around. This makes it easier to balance the responsibilities of the different objects and avoids assigning too many responsibilities to any single object.\r\r*https://www.reflektis.com/blog/active-passive-pattern/)"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-04-12T16:07:18.898728+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-04-12T16:07:34.058981+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Modular Monolith"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "2507ea12-f7ee-0d00-bd09-7ed007e7d286"
	}
}